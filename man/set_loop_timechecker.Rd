% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/loop_timechecker.R
\name{set_loop_timechecker}
\alias{set_loop_timechecker}
\title{Print elapsed and remaining time in iterative processes.}
\usage{
set_loop_timechecker(n_iter, overwrite = TRUE, timestep = 0.5)
}
\arguments{
\item{n_iter}{The number of iterations.}

\item{overwrite}{Logical. Should the message be overwritten?}

\item{timestep}{The smallest time step of the output (sec).}
}
\value{
A function \code{loop_timechecker}.
  When placed at the head of the iterations,
  it records and prints the progress of iteration, elapsed time,
  and predicted remaining time.
  You can add arbitrary strings to the printed messages
  by using \code{char_pre} and \code{char_post} arguments.
}
\description{
\code{set_loop_timechecker} returns a function that records and prints
processing time in interative processes.
}
\details{
Provided with the number of iterations,
this function creates a function named \code{loop_timechecker}
which records and prints processing time in interative process.
In actual usage, it is recommended to call this function and
creating \code{loop_timechecker} right before the iteration process,
and place the \code{loop_timechecker}
at the beginning of the iteration process.

If you want to keep all printed records in your console,
please set \code{overwrite = FALSE}.

The \code{timestep} argument determines the frequency of updating
printed information since too fast an update will decrease visibility.
}
\examples{
iters <- 1:1000
ans <- NULL
tc <- set_loop_timechecker(length(iters))
for (i in iters) {
  tc()
  ans <- c(ans, i)
  Sys.sleep(0.002)
}

# For multiple loops, overwrite and char_pre arguments can be used for readability
iters1 <- 1:3
iters2 <- 1:100
ans <- NULL
tc1 <- set_loop_timechecker(length(iters1), overwrite = FALSE)
for (i in iters1) {
  tc1()
  tc2 <- set_loop_timechecker(length(iters2))
  for (j in iters2) {
    tc2(char_pre = '-- ')
    ans <- c(ans, i * j)
    Sys.sleep(0.004)
  }
}

# char_pre or char_post can also be used to check name of current process
iters <- paste0('case', LETTERS[1:10])
tc <- set_loop_timechecker(length(iters))
for (i in iters) {
  tc(char_post = paste0('  Processing ', i))
  Sys.sleep(1)
}
}
\seealso{
\code{\link{set_step_timechecker}}
}
